{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","helper.js","componentes/Resultado.js","componentes/Resumen.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","titulo","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","cotizarSeguro","e","preventDefault","plan","current","checked","infoAuto","marca","value","year","cotizarSeguroo","onSubmit","this","name","ref","type","Component","obtenerDiferenciaAnio","Date","getFullYear","calcularMarca","modelo","incremento","obtenerPlan","primeraMayuscula","texto","charAt","toUpperCase","slice","Resultado","resultado","resultadoo","mensaje","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","Resumen","mostrarResumen","datos","App","state","incrementoPlan","parseFloat","toFixed","datosAuto","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ca87138.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"top\">\r\n            <h1>\r\n                {props.titulo}\r\n            </h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Formulario extends Component {\r\n    //refs son para leer los valores de los campos(que ingresa el usuario) de un formulario\r\n    //Un ref por cada campo\r\n    marcaRef = React.createRef();\r\n    yearRef = React.createRef();\r\n    planBasicoRef = React.createRef();\r\n    planCompletoRef = React.createRef();\r\n    //ambos son lo mismo solo que uno ocupa mas codigo que el otro ↑↓\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.marcaRef = React.createRef();\r\n    //     this.yearRef = React.createRef();\r\n    //     this.planBasicoRef = React.createRef();\r\n    //     this.planCompletoRef = React.createRef();\r\n    // }\r\n\r\n    //si no se pone el \"e\" sale en link http://localhost:3000/cotizador-react?marca=americano&year=2018 // con los campos que tienes agregado // para evitar eso se pone el e\r\n    // cotizarSeguro(e){\r\n    cotizarSeguro = (e) => {\r\n        //con esto se previene el comportamiento por default\r\n        e.preventDefault();\r\n        // console.log('Enviado..!');\r\n        // console.log(this.marcaRef);\r\n        // console.log(this);\r\n        //el this no esta apuntando correctamente(por el tema de la herencia extends de la clase), para solucionarlo se agrega en .bind(this) para que apunte que es de esta clase correctamente\r\n\r\n        \r\n        // -Obtener los datos\r\n        // console.log(this.marcaRef.current.value);\r\n            // operador condicional ternario JS // https://www.w3schools.com/js/js_comparisons.asp\r\n            // JavaScript también contiene un operador condicional que asigna un valor a una variable en función de alguna condición.\r\n            // variablename = (condition) ? value1:value2 \r\n            // variablename = (true o false) ?  retornara esto Si es true : retornara esto Si es false      \r\n        const plan = this.planBasicoRef.current.checked ? 'basico' : 'completo'\r\n\r\n        // -Crear el objeto\r\n        const infoAuto = {\r\n            marca: this.marcaRef.current.value,\r\n            year: this.yearRef.current.value,\r\n            plan: plan\r\n        }\r\n\r\n        // console.log(infoAuto);\r\n\r\n        // -Enviarlo al componente principal\r\n        this.props.cotizarSeguroo(infoAuto)\r\n\r\n        // Opcional\r\n        // -Resetear el formulario (para que se vuelva a renderizar)\r\n        // console.log(e.currentTarget)\r\n        // e.currentTarget.reset();\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            // action=\"enviar.php\" // la forma clasica // pero en react es ↓↓ // con un metodo (cotizarSeguro)\r\n            //La segunda manera mas facil es haciendo ese metodo arrow function y no habra problema con la referencia del this\r\n            // <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro.bind(this)}>\r\n            <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\r\n                <div className=\"campo\">\r\n                    <label>Marca</label>\r\n                    {/* Se integra el ref */}\r\n                    <select name=\"marca\" ref={this.marcaRef}>\r\n                        <option value=\"americano\">Americano</option>\r\n                        <option value=\"europeo\">Europeo</option>\r\n                        <option value=\"asiatico\">Asiatico</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Año</label>\r\n                    <select name=\"year\" ref={this.yearRef}>\r\n                        <option value=\"2018\">2018</option>\r\n                        <option value=\"2017\">2017</option>\r\n                        <option value=\"2016\">2016</option>\r\n                        <option value=\"2015\">2015</option>\r\n                        <option value=\"2014\">2014</option>\r\n                        <option value=\"2013\">2013</option>\r\n                        <option value=\"2012\">2012</option>\r\n                        <option value=\"2011\">2011</option>\r\n                        <option value=\"2010\">2010</option>\r\n                        <option value=\"2009\">2009</option>\r\n                        <option value=\"2008\">2008</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Plan:</label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        ref={this.planBasicoRef}\r\n                        name=\"plan\"\r\n                        value=\"basico\"\r\n                    />{\" \"}\r\n                    Básico\r\n                    <input\r\n                        type=\"radio\"\r\n                        ref={this.planCompletoRef}\r\n                        name=\"plan\"\r\n                        value=\"completo\"\r\n                    />{\" \"}\r\n                    Completo\r\n                </div>\r\n                {/* Etiquetas que tengan su propio cierre, es decir, ejemplo: <label></label> Normal React lo toma\r\n                Pero si es una etiqueta sin cierre como <input type=\"radio\"> se tendra que poner <input type=\"radio\" /> para que jsx lo pueda leer y no haiga error */}\r\n                <button type=\"submit\" className=\"boton\">\r\n                    Cotizar\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Formulario;\r\n","\r\nexport function obtenerDiferenciaAnio(year) {\r\n    return new Date().getFullYear() - year;\r\n }\r\n \r\n export function calcularMarca( modelo ) {\r\n     let incremento;\r\n \r\n     switch (modelo) {\r\n         case 'europeo':\r\n             incremento = 1.30;\r\n             break;\r\n         case 'americano':\r\n             incremento = 1.15;\r\n             break;\r\n         case 'asiatico':\r\n             incremento = 1.05;\r\n             break;\r\n         default:\r\n             break;\r\n     }\r\n \r\n     return incremento;\r\n }\r\n export function obtenerPlan( plan ) {\r\n     return (plan === 'basico') ? 1.20 : 1.50;\r\n }\r\n export function primeraMayuscula(texto) {\r\n     return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n }","import React,{Component} from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\n\r\nclass Resultado extends Component {\r\n\r\n    render() {\r\n        \r\n        const resultado = this.props.resultadoo;\r\n\r\n        const mensaje = (!resultado) ? 'Elige Marca, Año y Tipo de Seguro' : 'El total es: $';\r\n\r\n        return (\r\n            <div className = \"gran-total\">\r\n                {mensaje}\r\n                <TransitionGroup component = \"span\" className=\"resultado\"> \r\n                    <CSSTransition \r\n                    classNames=\"resultado\"\r\n                    key={resultado}\r\n                    timeout={{enter:500,exit:500}}>\r\n                        <span>{resultado}</span>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resultado;","import React,{Component} from 'react';\r\nimport {primeraMayuscula} from '../helper'\r\nimport Resultado from './Resultado';\r\nimport App from './App';\r\n\r\nclass Resumen extends Component {\r\n\r\n    mostrarResumen = () => {\r\n        const {marca, year, plan} = this.props.datos;\r\n\r\n        //verificar si no hay datos ingresados cortara y retornara null\r\n        if(!marca || !year || !plan) return null;\r\n\r\n        return (\r\n            <div className=\"resumen\">\r\n                <h2>Resumen de cotizacion</h2>\r\n                <li>Marca: {primeraMayuscula(marca)}</li>\r\n                <li>Plan: {primeraMayuscula(plan)}</li>\r\n                <li>Año del Auto: {year}</li>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        // const {marca, year, plan} = this.props.datos;\r\n        return (\r\n\r\n            //Si se hace esto se vera siempre este div renderizado\r\n            // <div className=\"resumen\">\r\n            //     <h2>Resumen de cotizacion</h2>\r\n            //     <li>Marca: {marca}</li>\r\n            //     <li>Plan: {plan}</li>\r\n            //     <li>Año del Auto: {year}</li>\r\n            // </div>\r\n\r\n            <div>\r\n                {this.mostrarResumen()}\r\n                \r\n                {/* //Otra manera de renderizar, en vez de ponerlo en el componente padre App.js\r\n                <Resultado resultadoo = {this.props.resultado} /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resumen;","import React, {Component} from \"react\";\nimport Header from \"./Header\";\nimport Formulario from \"./Formulario\";\nimport {obtenerDiferenciaAnio, calcularMarca, obtenerPlan} from '../helper';\nimport Resumen from \"./Resumen\";\nimport Resultado from \"./Resultado\";\n//TODO: Video 7 - 0:02  \nclass App extends Component {\n\n    //el state es el conector con los demas con los demas componentes, por ello cuando se hace una cambio se modifica en tiempo real\n    //1era manera\n    // constructor(props){\n    //     super(props)\n    //     this.state = {\n\n    //     }\n    // }\n\n    //2da manera\n    state = {\n        resultado : '',\n        datos: {}\n    }\n\n\n    cotizarSeguro = (datos) => {\n        // console.log(datos);\n        const { marca, plan, year} = datos\n\n        //-agregar una base de 2000\n        let resultado = 2000;\n\n        //-Obtener la diferencia de años\n        const diferencia = obtenerDiferenciaAnio(year)\n\n        //console.log('La diferencia es '+ diferencia)\n\n        //-por cada año restar el 3% al valor del seguro\n        resultado -= ((diferencia*3)*resultado) / 100;\n        // console.log(resultado)\n\n        //-Americano 15%, asiatico 5% y europeo 30% de incremento al valor actual\n        resultado = calcularMarca(marca) * resultado\n        // console.log(resultado)\n\n        //-el plan del auto, el basico incrementa el valor 20%, cobertura completa 50%\n        let incrementoPlan = obtenerPlan(plan)\n        // console.log(incrementoPlan)\n\n        //-dependiendo del plan incrementar\n        resultado = parseFloat(incrementoPlan * resultado).toFixed(2); \n\n        //crer objeto para el resumen\n        const datosAuto = {\n            marca : marca,\n            plan : plan,\n            year : year\n        }\n\n        //-ya tenemos el costo\n        // console.log(resultado)\n        this.setState({\n            resultado : resultado,\n            datos : datosAuto\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"contenedor\">\n                <Header titulo=\"Cotizador de Seguro de Auto\" />\n\n                <div className=\"contenedor-formulario\">\n                    \n                    {/* Aqui se usa props para mandar del componente formulario.js al componente padre App.js */}\n                    <Formulario cotizarSeguroo={this.cotizarSeguro} />\n\n                    <Resumen \n                    datos = {this.state.datos}\n                    resultado = {this.state.resultado}\n                    />\n\n                    <Resultado resultadoo = {this.state.resultado} />\n\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}